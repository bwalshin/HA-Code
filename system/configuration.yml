
### Configure a default setup of Home Assistant (frontend, api, etc) #############################################
default_config:

### Text to speech #############################################
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

### System Adjustments #############################################
discovery:

downloader:
  download_dir: downloads
  
  
http:
  use_x_forwarded_for: true
  trusted_proxies:
   - 172.30.33.3


### THEMES ###########
frontend:
  themes: !include_dir_merge_named themes


### LOGGER #############################################
logger:
  default: info
  logs:
    custom_components.ble_monitor: debug
    homeassistant.components.miflora: debug
    miflora.miflora_poller: debug


### WITHINGS CRIDENTIALS #############################################
withings:
    client_id: !secret withings_CLIENT_ID
    client_secret: !secret withings_CONSUMER_SECRET
    use_webhook: true
 
    
### AIR PURIFIER - BSENSOR #############################################
binary_sensor:
  - platform: template
    sensors:
      bedroom_air_purifier_screen_status:
        device_class: 'power'
        friendly_name: Screen Status
        value_template: "{{ state_attr('fan.bedroom_air_purifier', 'screen_status') }}"
        icon_template: >-
          {% if is_state("binary_sensor.bedroom_air_purifier_screen_status", "on") %}
            mdi:checkbox-blank
          {% else %}
            mdi:checkbox-blank-off-outline
          {% endif %}


### TIME AND DATE #############################################
sensor:
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'date_time_utc'
      - 'date_time_iso'
      - 'time_date'
      - 'time_utc'
      - 'beat'


### COVID STATS ###
#   - platform: rest
#     resource: "https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/1/query?f=json&where=(Country_Region%3D%27US%27)%20AND%20(Province_State%20LIKE%20%27%25Washington%27)&outStatistics=%5B%7B%22statisticType%22%3A%22sum%22%2C%22onStatisticField%22%3A%22Confirmed%22%2C%22outStatisticFieldName%22%3A%22Confirmed%22%7D%2C%20%7B%22statisticType%22%3A%22sum%22%2C%22onStatisticField%22%3A%22Deaths%22%2C%22outStatisticFieldName%22%3A%22Deaths%22%7D%2C%20%7B%22statisticType%22%3A%22sum%22%2C%22onStatisticField%22%3A%22Recovered%22%2C%22outStatisticFieldName%22%3A%22Recovered%22%7D%5D"
#     name: Coronavirus Washington confirmed
#     value_template: "{{ value_json.features[0].attributes.Confirmed }}"
#     json_attributes_path: "$.features[0].attributes"
#     unit_of_measurement: "Confirmed"
#     json_attributes:
#       - Confirmed
#       - Deaths
#       - Recovered
#       - Last Updated
#   - platform: rest
#     resource: "https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases/FeatureServer/1/query?f=json&where=(Country_Region%3D%27US%27)%20AND%20(Province_State%20LIKE%20%27%25Washington%27)&outStatistics=%5B%7B%22statisticType%22%3A%22sum%22%2C%22onStatisticField%22%3A%22Confirmed%22%2C%22outStatisticFieldName%22%3A%22Confirmed%22%7D%2C%20%7B%22statisticType%22%3A%22sum%22%2C%22onStatisticField%22%3A%22Deaths%22%2C%22outStatisticFieldName%22%3A%22Deaths%22%7D%2C%20%7B%22statisticType%22%3A%22sum%22%2C%22onStatisticField%22%3A%22Recovered%22%2C%22outStatisticFieldName%22%3A%22Recovered%22%7D%5D"
#     name: Coronavirus Washington deaths
#     value_template: "{{ value_json.features[0].attributes.Deaths }}"
#     json_attributes_path: "$.features[0].attributes"
#     unit_of_measurement: "Deaths"
#     json_attributes:
#       - Confirmed
#       - Deaths
#       - Recovered
#       - Last Updated

  - platform: rest
    resource: "https://services1.arcgis.com/0MSEUqKaxRlEPj5g/arcgis/rest/services/ncov_cases_US/FeatureServer/0/query?f=json&where=(Confirmed%20%3E%200)%20AND%20(Province_State%3D%27Washington%27)%20AND%20(Admin2%3D%27King%27)&returnGeometry=false&spatialRel=esriSpatialRelIntersects&outFields=*&orderByFields=Confirmed%20desc%2CCountry_Region%20asc%2CProvince_State%20asc&outSR=102100&resultOffset=0&resultRecordCount=250&cacheHint=true"
    name: Corona Virus Rest
    value_template: >
      {%- set last_updated = value_json.features | map(attribute='attributes.Last_Update') | list | max / 1000 %}
      {{ last_updated | timestamp_custom('%Y-%m-%dT%H:%M:%S.%f+00:00') }}
    json_attributes:
      - features

  - platform: template
    sensors:
      corona_virus_wa:
        friendly_name: Corona Virus Washington
        entity_id: sensor.corona_virus_rest
        availability_template: >
          {%- set features = state_attr('sensor.corona_virus_rest', 'features') %}
          {%- set features = features | map(attribute='attributes') | list %}
          {{ features | length > 0 }}
        value_template: >
          {%- set features = state_attr('sensor.corona_virus_rest', 'features') %}
          {%- set features = features | map(attribute='attributes') | list %}
          {%- set items = features | selectattr('Province_State','eq','Washington') | list %}
          {%- if items | length > 0 %}
            {%- set item = items | first %}
            {%- set last_updated = item.Last_Update | int / 1000 %}
            {{ last_updated | timestamp_custom('%Y-%m-%dT%H:%M:%S.%f+00:00', False) }}
          {%- else %}
            {{ states('sensor.corona_virus_wa') }}
          {%- endif %}
        attribute_templates:
          confirmed: >
            {%- set features = state_attr('sensor.corona_virus_rest', 'features') %}
            {%- set features = features | map(attribute='attributes') | list %}
            {%- set items = features | selectattr('Province_State','eq','Washington') | list %}
            {%- if items | length > 0 %}
              {%- set item = items | first %}
              {{ item.Confirmed }}
            {%- else %}
              {{ state_attr('sensor.corona_virus_wa', 'confirmed') }}
            {%- endif %}
          deaths: >
            {%- set features = state_attr('sensor.corona_virus_rest', 'features') %}
            {%- set features = features | map(attribute='attributes') | list %}
            {%- set items = features | selectattr('Province_State','eq','Washington') | list %}
            {%- if items | length > 0 %}
              {%- set item = items | first %}
              {{ item.Deaths }}
            {%- else %}
              {{ state_attr('sensor.corona_virus_wa', 'deaths') }}
            {%- endif %}
          recovered: >
            {%- set features = state_attr('sensor.corona_virus_rest', 'features') %}
            {%- set features = features | map(attribute='attributes') | list %}
            {%- set items = features | selectattr('Province_State','eq','Washington') | list %}
            {%- if items | length > 0 %}
              {%- set item = items | first %}
              {{ item.Recovered }}
            {%- else %}
              {{ state_attr('sensor.corona_virus_wa', 'recovered') }}
            {%- endif %}
          active: >
            {%- set features = state_attr('sensor.corona_virus_rest', 'features') %}
            {%- set features = features | map(attribute='attributes') | list %}
            {%- set items = features | selectattr('Province_State','eq','Washington') | list %}
            {%- if items | length > 0 %}
              {%- set item = items | first %}
              {{ item.Active }}
            {%- else %}
              {{ state_attr('sensor.corona_virus_wa', 'active') }}
            {%- endif %}

### WITHINGS SENSOR CONVERSION ###############
  - platform: template
    sensors:
      withings_weight_lbs_ha_connect_bwalshin:
        friendly_name: "withings weight_lbs_ha_connect_bwalshin"
        unit_of_measurement: "lbs"
        value_template: "{{ (states('sensor.withings_weight_kg_ha_connect_bwalshin') | float * 2.20462262185) | round(2) }}"
        icon_template: mdi:weight-pound

  - platform: template
    sensors:
      withings_bone_mass_lbs_ha_connect_bwalshin:
        friendly_name: "withings bone_mass_lbs_ha_connect_bwalshin"
        unit_of_measurement: "lbs"
        value_template: "{{ (states('sensor.withings_bone_mass_kg_ha_connect_bwalshin') | float * 2.20462262185) | round(2) }}"
        icon_template: mdi:weight-pound

  - platform: template
    sensors:
      withings_fat_free_mass_lbs_ha_connect_bwalshin:
        friendly_name: "withings fat_free_mass_lbs_ha_connect_bwalshin"
        unit_of_measurement: "lbs"
        value_template: "{{ (states('sensor.withings_fat_free_mass_kg_ha_connect_bwalshin') | float * 2.20462262185) | round(2) }}"
        icon_template: mdi:weight-pound

  - platform: template
    sensors:
      withings_fat_mass_lbs_ha_connect_bwalshin:
        friendly_name: "withings fat_mass_lbs_ha_connect_bwalshin"
        unit_of_measurement: "lbs"
        value_template: "{{ (states('sensor.withings_fat_mass_kg_ha_connect_bwalshin') | float * 2.20462262185) | round(2) }}"
        icon_template: mdi:weight-pound

  - platform: template
    sensors:
      withings_muscle_mass_lbs_ha_connect_bwalshin:
        friendly_name: "withings muscle_mass_lbs_ha_connect_bwalshin"
        unit_of_measurement: "lbs"
        value_template: "{{ (states('sensor.withings_muscle_mass_kg_ha_connect_bwalshin') | float * 2.20462262185) | round(2) }}"
        icon_template: mdi:weight-pound


### XFINITY USAGE #############################################
#   - platform: xfinity
#     username: !secret xfinity_email
#     password: !secret xfinity_password


### ASUS ROUTER #############################################
  - platform: template
    sensors:
      asuswrt_download_speed_kbps:
        value_template: "{{ states('sensor.asuswrt_download_speed') | multiply(1000)}}"
        friendly_name: AsusWRT Download Speed Kbps
        icon_template: mdi:Download
        unit_of_measurement: "Kbps"

      asuswrt_upload_speed_kbps:
        value_template: "{{ states('sensor.asuswrt_upload_speed') | multiply(1000)}}"
        friendly_name: AsusWRT Upload Speed Kbps
        icon_template: mdi:Upload
        unit_of_measurement: "Kbps"


### RING DOORBELL #############################################
      friendly_front_door_last_activity:
        value_template: "{% set entity_id = 'sensor.front_door_last_activity' %} {{ ( now().timestamp() + states(entity_id) | float * 60 ) | timestamp_custom('%B %d %Y  %H:%M:%S') }}"
        friendly_name: Front Door Last Activity
        icon_template: mdi:history
        device_class: 'timestamp'


### AIR PURIFIER - SENSORS #############################################
      bedroom_air_purifier_filter_life:
        device_class: 'power_factor'
        unit_of_measurement: "%"
        friendly_name: Air Filter Life
        value_template: "{{ state_attr('fan.bedroom_air_purifier', 'filter_life') }}"
        icon_template: mdi:air-filter

      bedroom_air_purifier_air_quality:
        friendly_name: Air Quality
        value_template: "{{ state_attr('fan.bedroom_air_purifier', 'air_quality') }}"
        icon_template: mdi:cloud

      bedroom_air_purifier_active_time:
        friendly_name: Active Time
        value_template: "{{ state_attr('fan.bedroom_air_purifier', 'active_time') }}"
        icon_template: mdi:timeline-clock


### PLANT SENSORS #############################################

#   - platform: miflora
#     mac: "C4:7C:8D:66:37:B4"
#     name: Coffee Arabica
#     force_update: true
#     median: 3
#     go_unavailable_timeout: 43200
#     scan_interval: 43200
#     monitored_conditions:
#       - moisture
#       - light
#       - temperature
#       - conductivity
#       - battery


ble_monitor:
  discovery: False
  period: 30
  restore_state: True
  use_median: True
  log_spikes: True
#   active_scan: True
  devices:
    - mac: 'C4:7C:8D:66:37:B4'
      name: 'Coffee arabica'
    - mac: 'C4:7C:8D:6B:CA:6C'
      name: 'Monstera deliciosa'
    - mac: 'C4:7C:8D:6C:A2:E8'
      name: 'Dracaena marginata'
    - mac: 'C4:7C:8D:6C:A7:D3'
      name: 'Ananas Comosus'
    - mac: 'C4:7C:8D:6C:AC:42'
      name: 'Snake Plant'


# plant:
#   # Coffee Arabica
#   coffee_arabica:
#     sensors:
#       moisture: sensor.coffee_arabica_moisture
#       battery: sensor.coffee_arabica_battery
#       temperature: sensor.coffee_arabica_temperature
#       conductivity: sensor.coffee_arabica_conductivity
#       brightness: sensor.coffee_arabica_light_intensity
#     min_moisture: 15
#     max_moisture: 65
#     min_battery: 20
#     min_conductivity: 350
#     max_conductivity: 2000
#     min_temperature: 15
#     max_temperature: 32
#     min_brightness: 2000
#     max_brightness: 30000
#     check_days: 3

